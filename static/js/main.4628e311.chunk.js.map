{"version":3,"sources":["utils/constants.js","components/circular-progress-bar/index.js","components/config-form/index.js","components/app/index.js","index.js"],"names":["DEFAULT_PROGRESS_BAR_PROPS","r","arc","rotate","progress","stroke","color","width","gap","animation","duration","getLineConfig","configs","index","lastAnimatedLineIndex","mainStroke","Math","max","x2","x1","lineAngle","isActive","strokeDashoffset","abs","durationInSecond","lineAnimationDuration","distance","delay","min","strokeDasharray","transform","style","className","CircularProgressBar","props","defu","useState","setLastAnimatedLine","createGetter","fn","get","Object","defineProperties","numberOfStrokeLines","this","size","handleLineAnimationEndIndex","i","console","log","useConfigs","height","viewBox","lines","push","onTransitionEnd","key","renderLines","ConfigForm","config","updateConfig","type","value","onChange","JSON","stringify","App","setConfig","event","prevConfig","types","number","string","_set","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4628e311.chunk.js","sourcesContent":["export const DEFAULT_PROGRESS_BAR_PROPS = {\n  r: 100,\n  arc: 360,\n  rotate: 0,\n  progress: 0,\n  stroke: { color: '#000000', width: 10, gap: 5 },\n  animation: { duration: 10000, stroke: { color: '#0000ff', width: 15 } },\n}\n","import defu from 'defu'\nimport { useState } from 'react'\nimport { DEFAULT_PROGRESS_BAR_PROPS } from '../../utils/constants'\nimport './circular-progress-bar.css'\n\nconst useConfigs = (props) => {\n  const configs = defu(props, DEFAULT_PROGRESS_BAR_PROPS)\n  const [lastAnimatedLineIndex, setLastAnimatedLine] = useState(-1)\n\n  const createGetter = (fn) => ({ get: fn })\n\n  Object.defineProperties(configs, {\n    numberOfStrokeLines: createGetter(function () {\n      return ~~(this.arc / this.stroke.gap)\n    }),\n\n    size: createGetter(function () {\n      return (\n        this.r * 2 + Math.max(this.stroke.width, this.animation.stroke.width)\n      )\n    }),\n\n    transform: createGetter(function () {\n      return `\n        translate(${this.size / 2}, ${this.size / 2})\n        rotate(${-90 + this.rotate})\n      `\n    }),\n\n    lineAnimationDuration: createGetter(function () {\n      return this.animation.duration / this.numberOfStrokeLines\n    }),\n\n    lastAnimatedLineIndex: createGetter(function () {\n      return lastAnimatedLineIndex\n    }),\n  })\n\n  const handleLineAnimationEndIndex = (i) => () => {\n    console.log(i)\n    setLastAnimatedLine(i)\n  }\n\n  return { configs, handleLineAnimationEndIndex }\n}\n\nconst getLineConfig = (configs, index) => {\n  const { stroke, r, progress, animation, lastAnimatedLineIndex } = configs\n\n  const mainStroke = Math.max(animation.stroke.width, stroke.width)\n  const x2 = r\n  const x1 = x2 - mainStroke\n  const lineAngle = index * stroke.gap\n  const isActive = lineAngle < progress\n\n  // isActive => animWidth > width === 0\n  // isActive => animWidth < width === width - animWidth\n  // !isActive => animWidth > width === animWidth - width\n  // !isActive => animWidth < width === 0\n\n  const isZeroDashoffset =\n    (isActive && animation.stroke.width > stroke.width) ||\n    (!isActive && animation.stroke.width < stroke.width)\n\n  const strokeDashoffset = isZeroDashoffset\n    ? 0\n    : Math.abs(animation.stroke.width - stroke.width)\n\n  // isActive => index < lastIndex === 0\n  // isActive => index > lastIndex === index - lastIndex\n\n  // !isActive => index > lastIndex === 0\n  // !isActive => index < lastIndex === lastIndex - index\n\n  const durationInSecond = configs.lineAnimationDuration / 1000\n  const distance = lastAnimatedLineIndex - index\n\n  const delay =\n    Math.abs(isActive ? Math.min(0, distance) : Math.max(0, distance)) *\n    durationInSecond\n\n  return {\n    x1,\n    x2,\n    strokeDashoffset,\n    strokeDasharray: `${mainStroke} ${mainStroke}`,\n    transform: `rotate(${lineAngle})`,\n    style: {\n      '--delay': `${delay}s`,\n      '--stroke': stroke.color,\n      '--stroke-active': animation.stroke.color,\n    },\n    className: isActive ? 'active' : '',\n  }\n}\n\nfunction CircularProgressBar(props) {\n  const { configs, handleLineAnimationEndIndex } = useConfigs(props)\n\n  const renderLines = () => {\n    const lines = []\n\n    for (let index = 0; index < configs.numberOfStrokeLines; index++) {\n      lines.push(\n        <line\n          {...getLineConfig(configs, index)}\n          onTransitionEnd={handleLineAnimationEndIndex(index)}\n          key={`pb-line-${index}`}\n        />\n      )\n    }\n\n    return lines\n  }\n\n  return (\n    <svg\n      width={configs.size}\n      height={configs.size}\n      viewBox={`0 0 ${configs.size} ${configs.size}`}\n    >\n      <g transform={configs.transform}>{renderLines()}</g>\n    </svg>\n  )\n}\n\nexport default CircularProgressBar\n","import './config-form.css'\n\nfunction ConfigForm({ config, updateConfig }) {\n  return (\n    <>\n      <form className=\"config-form\">\n        <h2>CONFIGURATION</h2>\n\n        <div className=\"form-field\">\n          <label>Radius</label>\n          <input\n            type=\"range\"\n            min=\"0\"\n            max=\"100\"\n            value={config.r}\n            onChange={updateConfig('r', 'number')}\n          />\n        </div>\n\n        <div className=\"form-field\">\n          <label>Arc</label>\n          <input\n            type=\"range\"\n            min=\"0\"\n            max=\"360\"\n            value={config.arc}\n            onChange={updateConfig('arc', 'number')}\n          />\n        </div>\n\n        <div className=\"form-field\">\n          <label>Rotate</label>\n          <input\n            type=\"range\"\n            min=\"0\"\n            max=\"360\"\n            value={config.rotate}\n            onChange={updateConfig('rotate', 'number')}\n          />\n        </div>\n\n        <div className=\"form-field\">\n          <label>Progress</label>\n          <input\n            type=\"range\"\n            min=\"10\"\n            max={config.arc}\n            value={config.progress}\n            onChange={updateConfig('progress', 'number')}\n          />\n        </div>\n\n        <div className=\"form-field\">\n          <label>Stroke Color</label>\n          <input\n            type=\"color\"\n            value={config.stroke.color}\n            onChange={updateConfig('stroke.color', 'string')}\n          />\n        </div>\n\n        <div className=\"form-field\">\n          <label>Stroke Width</label>\n          <input\n            type=\"range\"\n            min=\"10\"\n            max=\"50\"\n            value={config.stroke.width}\n            onChange={updateConfig('stroke.width', 'number')}\n          />\n        </div>\n\n        <div className=\"form-field\">\n          <label>Stroke Gap</label>\n          <input\n            type=\"range\"\n            min=\"0\"\n            max=\"40\"\n            value={config.stroke.gap}\n            onChange={updateConfig('stroke.gap', 'number')}\n          />\n        </div>\n\n        <div className=\"form-field\">\n          <label>Animation duration (ms)</label>\n          <input\n            type=\"range\"\n            min=\"0\"\n            max=\"10000\"\n            value={config.animation.duration}\n            onChange={updateConfig('animation.duration', 'number')}\n          />\n        </div>\n\n        <div className=\"form-field\">\n          <label>Animation - Stroke Color</label>\n          <input\n            type=\"color\"\n            value={config.animation.stroke.color}\n            onChange={updateConfig('animation.stroke.color', 'string')}\n          />\n        </div>\n\n        <div className=\"form-field\">\n          <label>Animation - Stroke Width</label>\n          <input\n            type=\"range\"\n            min=\"0\"\n            max=\"100\"\n            value={config.animation.stroke.width}\n            onChange={updateConfig('animation.stroke.width', 'number')}\n          />\n        </div>\n      </form>\n      <pre>{JSON.stringify(config, null, 4)}</pre>\n    </>\n  )\n}\n\nexport default ConfigForm\n","import { useState } from 'react'\nimport _set from 'lodash.set'\nimport { DEFAULT_PROGRESS_BAR_PROPS } from '../../utils/constants'\nimport CircularProgressBar from '../circular-progress-bar'\nimport ConfigForm from '../config-form'\nimport './app.css'\n\nfunction App() {\n  const [config, setConfig] = useState(DEFAULT_PROGRESS_BAR_PROPS)\n\n  const updateConfig = (key, type) => (event) => {\n    setConfig((prevConfig) => {\n      const types = {\n        number: (value) => +value,\n        string: (value) => value + '',\n      }\n\n      _set(prevConfig, key, types[type]?.(event.target.value))\n\n      return { ...prevConfig }\n    })\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"card\">\n        <div className=\"preview\">\n          <CircularProgressBar {...config} />\n        </div>\n        <ConfigForm config={config} updateConfig={updateConfig} />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/app'\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}